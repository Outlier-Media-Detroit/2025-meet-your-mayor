name: Deploy

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      env:
        type: choice
        description: Which environment to publish to
        options:
          - staging
          - production
        required: true

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - id: checkout
        name: Checkout the repo
        uses: actions/checkout@v3

      - name: Load .env file
        uses: xom9ikk/dotenv@v2

      - id: install-node
        name: Install Node.js 21.x
        uses: actions/setup-node@v3
        with:
          node-version: 21
          cache: "npm"

      - id: install-project-modules
        name: Install project dependencies
        run: npm ci --production
        shell: bash

      - id: validate-metadata
        name: Validate metadata
        run: npm run validate
        shell: bash

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - id: checkout
        name: Checkout the repo
        uses: actions/checkout@v3

      - id: set-env
        name: Determine deployment environment
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "ENVIRONMENT=${{ github.event.inputs.env }}" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          fi

      - name: Load .env file
        uses: xom9ikk/dotenv@v2

      - id: install-node
        name: Install Node.js 21.x
        uses: actions/setup-node@v3
        with:
          node-version: 21
          cache: "npm"

      - id: install-project-modules
        name: Install project dependencies
        run: npm ci --production ## For the app's build routine

      - id: get-slug
        name: Get slug
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            // Pull the slug
            const slug = `${{ env.GATSBY_SLUG }}`;
            console.log(`slug -> ${slug}`);

            // If we get this far, we're good to go.
            return slug.trim();

      - name: Reload content if manual dispatch event
        if: github.event_name == 'workflow_dispatch'
        run: |
          FILENAME=candidate DOCID=${{ vars.DOCID_CANDIDATES }} npm run download-content
          FILENAME=question DOCID=${{ vars.DOCID_QUESTIONS }} npm run download-content

      - id: npm-build
        name: Build project distribution
        run: PREFIX=/${{ env.GATSBY_SLUG }} npm run build
        env:
          PATH_PREFIX: ${{ steps.get-slug.outputs.result }}
          GATSBY_DOMAIN: ${{ env.ENVIRONMENT == 'production' && vars.DOMAIN_PRODUCTION || vars.DOMAIN_STAGING }}

      - id: configure-aws
        name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/${{ vars.AWS_IAM_ROLE }}
          aws-region: us-east-1

      - name: Invalidate CloudFront (clear cache)
        uses: chetan/invalidate-cloudfront-action@v2
        env:
          DISTRIBUTION: ${{ env.environment == 'production' && vars.CLOUDFRONT_DISTRIBUTION_PRODUCTION || vars.CLOUDFRONT_DISTRIBUTION_STAGING }}
          PATHS: ${{ format('/{0}/*', steps.get-slug.outputs.result) }}

      - id: npm-deploy
        name: Upload the prepared files
        uses: datadesk/delivery-deploy-action@v1
        with:
          bucket: ${{ env.ENVIRONMENT == 'production' && vars.S3_BUCKET_PRODUCTION || vars.S3_BUCKET_STAGING }}
          base-path: ${{ steps.get-slug.outputs.result }}
          dir: build
          should-cache: true
          use-accelerate-endpoint: false
          public: true
